import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;

/**
 * Created by SBT-Baksheev-SI on 18.08.2017.
 */

public class FormGUI extends JFrame {


    private JButton button1;

    public void paint(Graphics g) {
        super.paint(g);
        ArrayList<Point> points;
        try {
            FileReader in = new FileReader(new File("properties.txt"));
            BufferedReader input = new BufferedReader(in);
            String line = input.readLine();
            if (line.contains(".txt"))
                points = Helper.txtData.read(line.split("Path:")[1]);
            else
                points = Helper.jsonData.read(line.split("Path:")[1]);
            input.close();
            int max = points.toArray().length;
            Point point;
            for (int i = 0; i < max; i++) {
                point = points.get(i);
                if (point.getY() <= max * 40) g.drawString(point.name, point.getX(), point.getY() - 5);
                else g.drawString(point.name, point.getX(), point.getY() + 15);
                g.drawOval(point.getX(), point.getY(), 3, 3);
                for (int j = 0; j < point.nearbyPoints.toArray().length; j++) {
                    if (point.nearbyPoints.get(j).equals(point.name))
                        g.drawOval(point.getX() - 15, point.getY() - 7, 15, 15);
                    g.drawLine(point.getX(), point.getY(), Helper.ChordsByName(points, point.nearbyPoints.get(j), 0), Helper.ChordsByName(points, point.nearbyPoints.get(j), 1));
                }
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        ;
    }

    public static void main(String[] args) throws IOException {
        new FormGUI();
    }

    public FormGUI() throws IOException {
        super("FormGUI");
        JFrame.setDefaultLookAndFeelDecorated(true);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setSize(1000, 1000);
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        button1 = new JButton();
        button1.setText("Button");
        panel1.add(button1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }
}
